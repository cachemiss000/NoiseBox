/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes something that happened to a client or server. Mutually exclusive with the 'command' field.
 */
export type Event = ErrorEvent | PlayStateEvent | SongPlayingEvent | ListSongsEvent | ListPlaylistsEvent;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type EventName = string;
/**
 * The user-friendly error message. Should always get set.
 */
export type ErrorMessage = string;
/**
 * Different potential response states, indicating the success or failure of the prompting command.
 *
 * Should not be instantiated directly.
 */
export type ErrorType = 0 | 1 | 2 | 3;
/**
 * The dev- and machine-friendly error data. May not be set for production builds.
 */
export type ErrorData = string;
/**
 * Whether the return data is targeted for a dev- or prod- environment
 */
export type ErrorEnv = (ErrorDataEnv | number) & number;
/**
 * Dictates what kind of error data is attached to an exception.
 *
 * Used to indicate to the viewer whether debug data has been scrubbed. If a programmer sees "data_env=DEBUG"
 * and no debug data, that will result in a very different debug process than if they see "data_env=PROD" and
 * no debug data - so it's worth keeping around even if it's merely descriptive (rather than proscriptive) and
 * self-evident 99% of the time to boot.
 *
 * Attributes:
 *     ErrorDataEnv.PRODUCTION: Running out in the wild. Scrub debug data.
 *     ErrorDataEnv.DEBUG: Running in dev mode. Keep debug data.
 */
export type ErrorDataEnv = 0 | 1;
/**
 * The dev- and machine-friendly command that originated this event. May not be set in production builds. May not be set for errors that had no contributing event. May be a string for commands that weren't fully parsed.
 */
export type OriginatingCommand = string;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type EventName1 = string;
/**
 * Whether media is now playing or not.
 */
export type NewPlayState = boolean;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type EventName2 = string;
/**
 * Info for the current song
 */
export type CurrentSong = Song;
/**
 * Human-friendly name of the song - must be unique in a media library, and is used to refer to it elsewhere.
 */
export type Name = string;
/**
 * Human-friendly description of the song - only for informational purposes, and maybe un-set.
 */
export type Description = string;
/**
 * Path of the file from the viewpoint of the local server.
 */
export type LocalPath = string;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type EventName3 = string;
/**
 * The list of songs being returned
 */
export type Songs = Song[];
/**
 * Command sub-type - e.g. the command to perform.
 */
export type EventName4 = string;
/**
 * Human-friendly name of the playlist. Picked by the user. It must be unique in a media library, andis used to refer to it elsewhere.
 */
export type Name1 = string;
/**
 * Human-friendly description of the playlist, picked by the user. Informational purposes only.
 */
export type Description1 = string;
/**
 * An ordered list of song aliases - referring to Song.name fields that will play as part of this playlist.
 */
export type Songs1 = string[];
export type Playlists = Playlist[];
/**
 * Describes something that the server should do. Mutually exclusive with the 'event' field.
 */
export type Command = TogglePlayCommand | NextSongCommand | ListSongsCommand | ListPlaylistsCommand;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type CommandName = string;
/**
 * Optional field which indicates whether the server should play or pause. If unset, the server picks the opposite of the current state.
 */
export type PlayState = boolean;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type CommandName1 = string;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type CommandName2 = string;
/**
 * Command sub-type - e.g. the command to perform.
 */
export type CommandName3 = string;

export interface Message {
  event?: Event;
  command?: Command;

  [k: string]: unknown;
}

/**
 * Something bad happened and the guy on the other end of the wire needs to know about it.
 *
 * TODO: This should get added to a generic, versionless schema, then separately copied into the V1 schema.
 */
export interface ErrorEvent {
  event_name?: EventName;
  error_message?: ErrorMessage;
  /**
   * The type of error - e.g. "USER", or "INTERNAL" or whatever. Hints at where to look, and whether it'll get fixed if whatever caused it is tried again.
   */
  error_type?: ErrorType;
  error_data?: ErrorData;
  error_env?: ErrorEnv;
  originating_command?: OriginatingCommand;

  [k: string]: unknown;
}

/**
 * Tells the client whether the media player is playing or not..
 */
export interface PlayStateEvent {
  event_name?: EventName1;
  new_play_state?: NewPlayState;

  [k: string]: unknown;
}

/**
 * Informs the client that a new song is currently playing.
 */
export interface SongPlayingEvent {
  event_name?: EventName2;
  current_song?: CurrentSong;

  [k: string]: unknown;
}

/**
 * A song that can be played by the media player.
 */
export interface Song {
  name?: Name;
  description?: Description;
  metadata?: Metadata;
  local_path?: LocalPath;

  [k: string]: unknown;
}

/**
 * Additional key-value metadata, currently unspecified.
 */
export interface Metadata {
  [k: string]: string;
}

/**
 * Client receives a list of songs, usually by request.
 */
export interface ListSongsEvent {
  event_name?: EventName3;
  songs?: Songs;

  [k: string]: unknown;
}

/**
 * Client receives a list of playlists, usually by request.
 */
export interface ListPlaylistsEvent {
  event_name?: EventName4;
  playlists?: Playlists;

  [k: string]: unknown;
}

export interface Playlist {
  name?: Name1;
  description?: Description1;
  metadata?: Metadata1;
  songs?: Songs1;

  [k: string]: unknown;
}

/**
 * Human-friendly description of the playlist, picked by the user. Informational purposes only.
 */
export interface Metadata1 {
  [k: string]: string;
}

/**
 * Toggle the play state. Can optionally set the media player to the absolute "play" or "pause" state.
 */
export interface TogglePlayCommand {
  command_name?: CommandName;
  play_state?: PlayState;

  [k: string]: unknown;
}

/**
 * Skip to the next song.
 */
export interface NextSongCommand {
  command_name?: CommandName1;

  [k: string]: unknown;
}

/**
 * Get a list of valid songs to reference.
 */
export interface ListSongsCommand {
  command_name?: CommandName2;

  [k: string]: unknown;
}

/**
 * Get a list of valid playlists to reference.
 */
export interface ListPlaylistsCommand {
  command_name?: CommandName3;

  [k: string]: unknown;
}
